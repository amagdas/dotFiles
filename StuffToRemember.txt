=================ANDROID=================================================
ant debug install && adb shell 'am start -n com.kno.textbooks/.splash.SplashActivity'
ctags --recurse --langmap=Java:.java --languages=Java --verbose -f ~/.vim/tags $ANDROID_SDK/sources
ctags -R src gen libs

Now, after a :make you can step forward and back through the compiler messages using :cn and :cp.

=================GIT=====================================================
git co -b newBranch
git commit. ....
git push origin newBranch
git branch -a
git branch --set-upstream newBranch origin/newBranch

=================VIM=====================================================
gf - go to file under cursor/ EPIC
CTRL+6 - go back from where you came with gf
CTRL+SHIFT+6 - go back in a cycle
CTRL+W+f - open file in new window(buffer)
V+G+Y - yank whole file
daw - delete a word
:Obsess "sessionName" - start a session
gvim -s "sessionName" - open vim from session
:xa - save all and close
\t - open CommandT(awesome)
:make
\cc - comment visual selection
\cu - uncomment

========================Misc=============================================
 Delete all files terminating in extension .orig //when patch -p0 < mypatch.patch fails
find -iname *.orig -exec rm {} \;

//THIS works
 find . -type f -iname *.java -exec grep -l "cancelAllRunningOperations" {} +

Find all files containg string and list only file names
find . | xargs grep 'DoDestroy*' -sl

find . -name '*.orig' -print0 | xargs -0 rm
=========================================================================
We are using ElasticSearch for content indexing and MongoDb as a content datastore in the REST service.
We have a setup so that ElasticSearch is doing an automatic indexing of the content stored in MongoDB.
Good tutorial to follow-up on: https://coderwall.com/p/sy1qcw

For this setup to work we need the following components installed:
1. MongoDB configured for replication:
http://docs.mongodb.org/manual/tutorial/convert-standalone-to-replica-set/

#for primary
$ mongod --port 27017 --dbpath /home/adrian/mongo-master --replSet rpl0

#for slave
$ mongod --port 27018 --dbpath /home/adrian/mongo-slave --replSet rpl0

$ mongo
$ rs.initiate()
$ rs.add({"_id":1,"host":"adrian.chromebook:27018"})
$ rs.status()

2. Elastic search
- install elastic search, latest version on the same machine were MongoDB slave is installed 

3. Install the following elasticsearch plugins: mapper-attachments, river-mongodb, lang-javascript

$cd /usr/share/elasticsearch
./bin/plugin -install elasticsearch/elasticsearch-mapper-attachments/2.0.0
./bin/plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0
./bin/plugin -install elasticsearch/elasticsearch-lang-javascript/1.4.0

4. Configure river-mongodb driver to index the content from MongoDb

curl -XPUT "localhost:9200/_river/content_image/_meta" -d'
{
    type: "mongodb",
    mongodb: {
      
      db: "application", 
      collection: "content_mapped",
      options: {
          "drop_collection": true
      }, 
      script: "ctx.document.Type = ctx.document.ContentType; ctx.document.Status = ctx.document.PubStatus; ctx.document.VersionOn = ctx.document.VersionOn.date; ctx.document.CreatedOn = ctx.document.CreatedOn.date; if(ctx.document.Renditions.length > 0) { var oldRenditions = ctx.document.Renditions; var newRenditions = {}; for(var i = 0; i < oldRenditions.length; i++){ var currentRend = oldRenditions[i]; var name = currentRend.Name; currentRend.href = currentRend.ContentURL; delete currentRend.Name; delete currentRend.ContentURL; delete currentRend._cls; newRenditions[name] = currentRend; } ctx.document.Renditions = newRenditions; } delete ctx.document.ContentType; delete ctx.document.PubStatus; delete ctx.document._cls;"
      },
        index: {
            name: "content_image"
        }
}'

curl -XPUT 'http://localhost:9200/_river/mongodb/_meta' -d '{ 
    "type": "mongodb", 
    "mongodb": { 
        "db": "mydb", 
        "options": {
          "drop_collection": true,
          "import_all_collections": true
        }
    }, 
    "index": {
        "name": "mydb"
    }
}'

curl -XPUT "localhost:9200/_river/mongoscriptfilter/_meta" -d'
{
  "type": "mongodb",
    "mongodb": {
      "db": "mydb", 
      "collection": "testData", 
      "script": "ctx.document.point_x = ctx.document.x; delete ctx.document.x;"
    },
    "index": {
      "name": "testscript", 
      "type": "testData"
    }
}'

curl -XPUT "localhost:9200/_river/mongotrans/_meta" -d'
{
  "type": "mongodb",
    "mongodb": {
      "db": "mydb", 
       "options": {
          "drop_collection": true,
          "import_all_collections": true
        }, 
      "script": "ctx.document.point_x = ctx.document.x; ctx.document.point_z = ctx.document.j; delete ctx.document.x; delete ctx.document.j;"
    },
    "index": {
      "name": "mongotrans"
    }
}'
var data = {
    "ContentType": "image", //Type
    "CreatedOn": {
        "date": date
    },
    "HeadLine": "beautiful picture " +1,
    "Provider": "AAP",
    "PubStatus": "usable", //Status
    "Renditions": [
    {
        "_cls": "RenditionMapped",
        "ContentURL": "http://pictures.com/beautiful.jpg",
        "Name": "default",
        "Width": 100,
        "Height": 40
    }
    ],
        "Type": "resource",
        "Version": 1,
        "VersionOn": {
            "date": date
        },
        "_cls": "ItemMapped.ItemResourceMapped.ItemImageMapped"
};

curl -XPUT "localhost:9200/_river/mongotrans/_meta" -d'
{
    "type": "mongodb",
        "mongodb": {
            "db": "mydb", 
            "options": {
                "drop_collection": true,
                "import_all_collections": true
            }, 
            "script": "ctx.document.Type = ctx.document.ContentType; ctx.document.point_z = ctx.document.j; delete ctx.document.x; delete ctx.document._cls;"
        },
        "index": {
            "name": "mongotrans"
        }
}'

for (var i = 5000; i <= 15000; i++) db.sampleData.insert( { j: i*i, name: "mongo script test" + i, x : i, point_y: i*2, even : i % 2 } )

var insertImages = function(from, to) {
    for (var i = from; i <= to; i++) {
        var date = new Date().getTime();
        var data = {
            "ContentType": "image",
            "CreatedOn": {
                "date": date
            },
            "HeadLine": "beautiful picture " +1,
            "Provider": "AAP",
            "PubStatus": "usable",
            "Renditions": [
            {
                "_cls": "RenditionMapped",
                "ContentURL": "http://pictures.com/beautiful.jpg",
                "Name": "default",
                "Width": 100,
                "Height": 40
            }
            ],
                "Type": "resource",
                "Version": 1,
                "VersionOn": {
                    "date": date
                },
                "_cls": "ItemMapped.ItemResourceMapped.ItemImageMapped"
        };
        db.sampleData.insert(data);
    }
}
curl -XGET http://localhost:9200/mydb/mockData/5347a380576c784f2112df34?pretty=true
curl -XGET http://localhost:9200/mydb/_search?query:match_all | python -mjson.tool
